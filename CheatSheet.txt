Навигация
* pwd — покажи, в какой я папке;
* ls  — покажи файлы и папки в текущей папке;
* ls -a — покажи также скрытые файлы и папки, названия которых начинаются с символа .;
* cd first-project  — перейди в папку first-project;
* cd first-project/html — перейди в папку html, которая находится в папке first-project;
* cd .. — перейди на уровень выше, в родительскую папку;
* cd ~ — перейди в домашнюю директорию (/Users/Username);
* cd / — перейди в корневую директорию.

Работа с файлами и папками

Создание
* touch index.html — создай файл index.html в текущей папке;
* touch index.html style.css script.js — если нужно создать сразу несколько файлов, можно напечатать их имена в одну строку через пробел;
* mkdir second-project  — создай папку с именем second-project в текущей папке.

Копирование и перемещение
* cp file.txt ~/my-dir — скопируй файл в другое место;
* mv file.txt ~/my-dir — перемести файл или папку в другое место.

Чтение
* cat file.txt — распечатай содержимое текстового файла file.txt.

Удаление
* rm about.html — удали файл about.html;
* rmdir images — удали папку images;
* rm -r second-project — удали папку second-project и всё, что она содержит.

Ssh key

* cd ~ go to home directory
* ls -la .ssh/ - check all made’s ssh keys

Generation ssh key 
* ssh-keygen -t ed25519 -C "электронная почта, к которой привязан ваш аккаунт на GitHub" ( if error - go to step 2);
* ssh-keygen -t rsa -b 4096 -C "электронная почта, к которой привязан ваш аккаунт на GitHub"; 
* ls -a ~/.ssh  - проверка сгенерированных ключей;
* ssh -T git@github.com  -  check correct key.

Хеш — основной идентификатор коммита

* Команда git log - выведет и сторию коммитов - это набор данных: когда был сделан коммит, содержимое файлов в репозитории на момент коммита и ссылка на предыдущий, или родительский (англ. parent), коммит.
* Хеш — основной идентификатор коммита, хранит информацию о коммите, авторе, времени когда был создан коммит, и файле который был добавлен в коммит
* Git хранит таблицу соответствий хеш → информация о коммите. Если вы знаете хеш, вы можете узнать всё остальное: автора и дату коммита и содержимое закоммиченных файлов.
* Команда git log -oneline выведет сокращенный лог коммитов, в терминале появятся первые несколько символов хэша и комментарий к коммиту.
*Сокращённый лог полезен, если в репозитории уже много коммитов — например, сотни или тысячи. В этом случае можно быстро найти нужный по описанию.

HEAD — всему голова

*Файл HEAD — один из служебных файлов папки .git. Он указывает на коммит, который сделан последним. Этот указательмы можем наблюдать при вызове истории комитов.
*Когда вы делаете коммит, Git обновляет refs/heads/main — записывает в него хеш последнего коммита. Получается, что HEAD тоже обновляется, так как ссылается на refs/heads/main.
*Если нужно передать последний коммит, то вместо его хеша можно просто написать слово HEAD — Git поймёт, что вы имели в виду последний коммит.

Статусы файлов в Git

* Untracked - создал файл или папку в дирректории, но не подготовил к коммиту!
* Staged - после команды git add ...somefile... файл готов к комиту -стоит на сцене для общего фото, команда git commit -m "sometext" сделает фото
* Tracked - состояние файлов которые были зафиксирваны клмандами git commit -m or git add (это состояние по умолчанию присвоено файлам в статусе stage and modified )
* Modifier - означает что гит нашел изменения в файле после того как тот быд закомичен.


НАЧАЛО РАБОТЫ С GIT!!!

git init — инициализируй репозиторий.

Синхронизация локального и удалённого репозиториев

git remote add origin https://github.com/YOURLINK.git  — привяжи локальный репозиторий к удалённому с URL 
git remote -v — проверь, что репозитории действительно связались;
git push -u origin main — в первый раз загрузи все коммиты из локального репозитория в удалённый с названием origin.

Подготовка файла к коммиту

git add todo.txt — подготовь файл todo.txt к коммиту;
git add --all — подготовь к коммиту сразу все файлы, в которых были изменения, и все новые файлы;
git add . — подготовь к коммиту текущую папку и все файлы в ней.

Создание и публикация коммита

git commit -m "Комментарий к коммиту."  — сделай коммит и оставь комментарий, чтобы было проще понять, какие изменения сделаны;
git push — добавь изменения в удалённый репозиторий.

Просмотр информации о коммитах

git log  — выведи подробную историю коммитов;
git log --oneline — покажи краткую информацию о коммитах: сокращённый хеш и сообщение.

Просмотр состояния файлов

git status — покажи текущее состояние репозитория.
Добавление изменений в последний коммит

git commit --amend --no-edit — добавь изменения к последнему коммиту и оставь сообщение прежним;
git commit --amend -m "Новое сообщение" — измени сообщение к последнему коммиту на Новое сообщение.

Откат» файлов и коммитов

git restore --staged hello.txt — переведи файл hello.txt из состояния staged обратно в untracked или modified;
git restore hello.txt — верни файл hello.txt к последней версии, которая была сохранена через git commit или git add;
git reset --hard b576d89  — удали все незакоммиченные изменения из staging и «рабочей зоны» вплоть до указанного коммита.

Просмотр изменений

git diff  — покажи изменения в «рабочей зоне», то есть в modified-файлах;
git diff a9928ab 11bada1 — выведи разницу между двумя коммитами;
git diff --staged — покажи изменения, которые добавлены в staged-файлах.